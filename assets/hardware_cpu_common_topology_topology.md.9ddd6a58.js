import{_ as l,r,o as i,c as o,a as d,b as c}from"./app.21cc2de4.js";const h="/blog/assets/topology_01.15aef1e2.png",s="/blog/assets/topology_02.49f1c8d7.png",b=JSON.parse('{"title":"CPU拓扑","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 基本概念","slug":"_1-基本概念","link":"#_1-基本概念","children":[]},{"level":2,"title":"2. CPU拓扑一","slug":"_2-cpu拓扑一","link":"#_2-cpu拓扑一","children":[]},{"level":2,"title":"3. CPU拓扑二","slug":"_3-cpu拓扑二","link":"#_3-cpu拓扑二","children":[]},{"level":2,"title":"4. 两种拓扑对比","slug":"_4-两种拓扑对比","link":"#_4-两种拓扑对比","children":[{"level":3,"title":"4.1 性能方面","slug":"_4-1-性能方面","link":"#_4-1-性能方面","children":[]},{"level":3,"title":"4.2 成本方面","slug":"_4-2-成本方面","link":"#_4-2-成本方面","children":[]}]},{"level":2,"title":"5. 小结","slug":"_5-小结","link":"#_5-小结","children":[]}],"relativePath":"hardware/cpu/common/topology/topology.md"}'),n={name:"hardware/cpu/common/topology/topology.md"};function p(t,e,_,u,g,m){const a=r("Vssue");return i(),o("div",null,[e[0]||(e[0]=d('<h1 id="cpu拓扑" tabindex="-1">CPU拓扑 <a class="header-anchor" href="#cpu拓扑" aria-hidden="true">#</a></h1><hr><table><thead><tr><th>软件版本</th><th>硬件版本</th><th>更新内容</th></tr></thead><tbody><tr><td>linux 5.8.18</td><td></td><td></td></tr></tbody></table><hr><h2 id="_1-基本概念" tabindex="-1">1. 基本概念 <a class="header-anchor" href="#_1-基本概念" aria-hidden="true">#</a></h2><ul><li>package : 我们肉眼可见的一个CPU通常称为一个package.</li><li>socket : 包含一组CPU核属于package的一部分，属于X86平台的概念</li><li>cluster : 来socket含义一样，用于arm平台.</li><li>die : 这里不是死亡的意思，而是指圆形硅锭的切片</li><li>thread : 这里是物理线程或者逻辑CPU，多个thread共享计算单元</li><li>MC : 第多核心 multiple cores</li></ul><h2 id="_2-cpu拓扑一" tabindex="-1">2. CPU拓扑一 <a class="header-anchor" href="#_2-cpu拓扑一" aria-hidden="true">#</a></h2><p>拓扑一的结构如下： <img src="'+h+'" alt="topology 1" title="topology1"></p><p>这种结构需要建立起两个<code>die</code>之间的通信机制。</p><h2 id="_3-cpu拓扑二" tabindex="-1">3. CPU拓扑二 <a class="header-anchor" href="#_3-cpu拓扑二" aria-hidden="true">#</a></h2><p>拓扑二的结构如下： <img src="'+s+'" alt="topology 2" title="topology2"> 这种结构相对比较简单，所有的<code>core</code>处理同一个DIE</p><h2 id="_4-两种拓扑对比" tabindex="-1">4. 两种拓扑对比 <a class="header-anchor" href="#_4-两种拓扑对比" aria-hidden="true">#</a></h2><h3 id="_4-1-性能方面" tabindex="-1">4.1 性能方面 <a class="header-anchor" href="#_4-1-性能方面" aria-hidden="true">#</a></h3><p>毫无疑问，拓扑二的性能要更好，所有的核处于同一个<code>die</code>,这样通信效率更高，带宽也更高。</p><h3 id="_4-2-成本方面" tabindex="-1">4.2 成本方面 <a class="header-anchor" href="#_4-2-成本方面" aria-hidden="true">#</a></h3><p>拓扑一要好，成本要低，原因是晶圆或者说<code>die</code>在在生产过程中是存在缺陷的，表面积越大，意味着存在缺陷的可能性也越大，这样成本也就越高。</p><h2 id="_5-小结" tabindex="-1">5. 小结 <a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a></h2><p>两种拓扑各有优缺点，存在即为合理。Intel CPU大多拓扑二，AMD 大多采用拓扑一。</p><hr><div class="tip custom-block"><p class="custom-block-title">提示</p><p>欢迎评论、探讨,如果发现错误请指正。转载请注明出处！ <a href="http://www.tsz.wiki" target="_blank" rel="noreferrer">探索者</a></p></div><hr>',21)),c(a,{title:t.$title},null,8,["title"])])}const k=l(n,[["render",p]]);export{b as __pageData,k as default};
