import{_ as l,r as p,o as e,c as o,a as r,b as t}from"./app.a2daf185.js";const d=JSON.parse('{"title":"进程优先级","description":"","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"用户空间进程优先级","slug":"用户空间进程优先级","link":"#用户空间进程优先级","children":[]},{"level":2,"title":"内核中的优先级","slug":"内核中的优先级","link":"#内核中的优先级","children":[{"level":3,"title":"static_prio","slug":"static-prio","link":"#static-prio","children":[]},{"level":3,"title":"rt_priority","slug":"rt-priority","link":"#rt-priority","children":[]},{"level":3,"title":"normal_prio","slug":"normal-prio","link":"#normal-prio","children":[]},{"level":3,"title":"prio","slug":"prio","link":"#prio","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"linux/process/priority/priority.md"}'),c={name:"linux/process/priority/priority.md"};function F(n,s,i,y,b,u){const a=p("Vssue");return e(),o("div",null,[s[0]||(s[0]=r(`<h1 id="进程优先级" tabindex="-1">进程优先级 <a class="header-anchor" href="#进程优先级" aria-hidden="true">#</a></h1><hr><table><thead><tr><th>软件版本</th><th>硬件版本</th><th>更新内容</th></tr></thead><tbody><tr><td>linux 4.9</td><td>arm64</td><td></td></tr></tbody></table><hr><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-hidden="true">#</a></h2><p>由于进程优先级在用户空间和内核空间的定义不同，而且在内核空间也存在多种优先级，所以让人比较费解。本文将介绍linux系统中的各种优先，算是作一个总结吧。</p><h2 id="用户空间进程优先级" tabindex="-1">用户空间进程优先级 <a class="header-anchor" href="#用户空间进程优先级" aria-hidden="true">#</a></h2><p>在用户空间对于优先级的控制接口大概有3个，如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">int nice (int __inc);</span></span>
<span class="line"><span style="color:#F8F8F2;">int getpriority(int which, id_t who);</span></span>
<span class="line"><span style="color:#F8F8F2;">int setpriority(int which, id_t who, int value);</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中nice()源码如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">int</span></span>
<span class="line"><span style="color:#A6E22E;">nice</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">incr</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> save;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> prio;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> result;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">  /* -1 is a valid priority, so we use errno to check for an error.  */</span></span>
<span class="line"><span style="color:#F8F8F2;">  save </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> errno;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">__set_errno</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">__getpriority</span><span style="color:#F8F8F2;"> (PRIO_PROCESS, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (prio </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (errno </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">__setpriority</span><span style="color:#F8F8F2;"> (PRIO_PROCESS, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, prio </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> incr);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (result </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (errno </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> EACCES)</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#A6E22E;">__set_errno</span><span style="color:#F8F8F2;"> (EPERM);</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">__set_errno</span><span style="color:#F8F8F2;"> (save);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">__getpriority</span><span style="color:#F8F8F2;"> (PRIO_PROCESS, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>所以只有setpriority getpriority. 当我们 man setpriority时，可以看到：</p><blockquote><p>The prio argument is a value in the range -20 to 19 (but see NOTES below).</p></blockquote><p>所以在用户空间普通进程priority就是一个-20（优先级最高）～19（优先级最低)的整数。 另外还有一个实时进程，优先级为1-99,99为最高。</p><h2 id="内核中的优先级" tabindex="-1">内核中的优先级 <a class="header-anchor" href="#内核中的优先级" aria-hidden="true">#</a></h2><p>先看代码：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">struct task_struct {</span></span>
<span class="line"><span style="color:#F8F8F2;">	...</span></span>
<span class="line"><span style="color:#F8F8F2;">    int prio, static_prio, normal_prio;</span></span>
<span class="line"><span style="color:#F8F8F2;">	unsigned int rt_priority;</span></span>
<span class="line"><span style="color:#F8F8F2;">	...</span></span>
<span class="line"><span style="color:#F8F8F2;">    unsigned int policy;</span></span>
<span class="line"><span style="color:#F8F8F2;">	...</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在内核中一共有四种优先级，一一说明一下。</p><h3 id="static-prio" tabindex="-1">static_prio <a class="header-anchor" href="#static-prio" aria-hidden="true">#</a></h3><p>这个是所有其他优先级计算的Base。这个优先级是进程启动时会被设置，也可以通过用户态的设置接口，如nice来设置。但在内核中设置的值会被转化，如下代码：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"></span>
<span class="line"><span style="color:#F92672;">#define</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">MAX_NICE</span><span style="color:#F8F8F2;">	</span><span style="color:#AE81FF;">19</span></span>
<span class="line"><span style="color:#F92672;">#define</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">MIN_NICE</span><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">20</span></span>
<span class="line"><span style="color:#F92672;">#define</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">NICE_WIDTH</span><span style="color:#F8F8F2;">	(MAX_NICE </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> MIN_NICE </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;"> * Priority of a process goes from 0..MAX_PRIO-1, valid RT</span></span>
<span class="line"><span style="color:#88846F;"> * priority is 0..MAX_RT_PRIO-1, and SCHED_NORMAL/SCHED_BATCH</span></span>
<span class="line"><span style="color:#88846F;"> * tasks are in the range MAX_RT_PRIO..MAX_PRIO-1. Priority</span></span>
<span class="line"><span style="color:#88846F;"> * values are inverted: lower p-&gt;prio value means higher priority.</span></span>
<span class="line"><span style="color:#88846F;"> *</span></span>
<span class="line"><span style="color:#88846F;"> * The MAX_USER_RT_PRIO value allows the actual maximum</span></span>
<span class="line"><span style="color:#88846F;"> * RT priority to be separate from the value exported to</span></span>
<span class="line"><span style="color:#88846F;"> * user-space.  This allows kernel threads to set their</span></span>
<span class="line"><span style="color:#88846F;"> * priority to a value higher than any user task. Note:</span></span>
<span class="line"><span style="color:#88846F;"> * MAX_RT_PRIO must not be smaller than MAX_USER_RT_PRIO.</span></span>
<span class="line"><span style="color:#88846F;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">#define</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">MAX_USER_RT_PRIO</span><span style="color:#F8F8F2;">	</span><span style="color:#AE81FF;">100</span></span>
<span class="line"><span style="color:#F92672;">#define</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">MAX_RT_PRIO</span><span style="color:#F8F8F2;">		MAX_USER_RT_PRIO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">#define</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">MAX_PRIO</span><span style="color:#F8F8F2;">		(MAX_RT_PRIO </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> NICE_WIDTH)</span></span>
<span class="line"><span style="color:#F92672;">#define</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">DEFAULT_PRIO</span><span style="color:#F8F8F2;">		(MAX_RT_PRIO </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> NICE_WIDTH </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/*</span></span>
<span class="line"><span style="color:#88846F;"> * Convert user-nice values [ -20 ... 0 ... 19 ]</span></span>
<span class="line"><span style="color:#88846F;"> * to static priority [ MAX_RT_PRIO..MAX_PRIO-1 ],</span></span>
<span class="line"><span style="color:#88846F;"> * and back.</span></span>
<span class="line"><span style="color:#88846F;"> */</span></span>
<span class="line"><span style="color:#F92672;">#define</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">NICE_TO_PRIO</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">nice</span><span style="color:#F8F8F2;">)	((nice) </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> DEFAULT_PRIO)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">NICE_TO_PRIO</span><span style="color:#F8F8F2;">(attr</span><span style="color:#F92672;">-&gt;</span><span style="color:#FD971F;font-style:italic;">sched_nice</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>从这里很明显的可以看到，对于普通进程，优化级在内核会被转化为100～139的值 另外进程在fork的时候会执行如下代码：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">unlikely</span><span style="color:#F8F8F2;">(p</span><span style="color:#F92672;">-&gt;</span><span style="color:#FD971F;font-style:italic;">sched_reset_on_fork</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">task_has_dl_policy</span><span style="color:#F8F8F2;">(p) </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">task_has_rt_policy</span><span style="color:#F8F8F2;">(p)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">			p-&gt;policy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> SCHED_NORMAL;</span></span>
<span class="line"><span style="color:#F8F8F2;">			p-&gt;static_prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">NICE_TO_PRIO</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">			p-&gt;rt_priority </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">		} </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">PRIO_TO_NICE</span><span style="color:#F8F8F2;">(p-&gt;static_prio) </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">			p-&gt;static_prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">NICE_TO_PRIO</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">		p-&gt;prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> p-&gt;normal_prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">__normal_prio</span><span style="color:#F8F8F2;">(p);</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#A6E22E;">set_load_weight</span><span style="color:#F8F8F2;">(p);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">		/*</span></span>
<span class="line"><span style="color:#88846F;">		 * We don&#39;t need the reset flag anymore after the fork. It has</span></span>
<span class="line"><span style="color:#88846F;">		 * fulfilled its duty:</span></span>
<span class="line"><span style="color:#88846F;">		 */</span></span>
<span class="line"><span style="color:#F8F8F2;">		p-&gt;sched_reset_on_fork </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>sched_reset_on_fork为真，那么static_prio会被设置成NICE_TO_PRIO(0)=120。 这个值的取值范围：0～139，但有一点对于实时进程，这个值没什么意义，后面会讲到。</p><h3 id="rt-priority" tabindex="-1">rt_priority <a class="header-anchor" href="#rt-priority" aria-hidden="true">#</a></h3><p>实时优先级，同样可以通用户态的设置的，在内核中的代码如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">void</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">__setscheduler_params</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> task_struct </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">p</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> sched_attr </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">attr</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> policy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> attr-&gt;sched_policy;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (policy </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> SETPARAM_POLICY)</span></span>
<span class="line"><span style="color:#F8F8F2;">		policy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> p-&gt;policy;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	p-&gt;policy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> policy;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">dl_policy</span><span style="color:#F8F8F2;">(policy))</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#A6E22E;">__setparam_dl</span><span style="color:#F8F8F2;">(p, attr);</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">fair_policy</span><span style="color:#F8F8F2;">(policy))</span></span>
<span class="line"><span style="color:#F8F8F2;">		p-&gt;static_prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">NICE_TO_PRIO</span><span style="color:#F8F8F2;">(attr-&gt;sched_nice);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">	/*</span></span>
<span class="line"><span style="color:#88846F;">	 * __sched_setscheduler() ensures attr-&gt;sched_priority == 0 when</span></span>
<span class="line"><span style="color:#88846F;">	 * !rt_policy. Always setting this ensures that things like</span></span>
<span class="line"><span style="color:#88846F;">	 * getparam()/getattr() don&#39;t report silly values for !rt tasks.</span></span>
<span class="line"><span style="color:#88846F;">	 */</span></span>
<span class="line"><span style="color:#F8F8F2;">	p-&gt;rt_priority </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> attr-&gt;sched_priority;</span></span>
<span class="line"><span style="color:#F8F8F2;">	p-&gt;normal_prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">normal_prio</span><span style="color:#F8F8F2;">(p);</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#A6E22E;">set_load_weight</span><span style="color:#F8F8F2;">(p);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><blockquote><p>__sched_setscheduler() ensures attr-&gt;sched_priority == 0 when!rt_policy. Always setting this ensures that things like</p></blockquote><p>这个注释说的很普通进程这个值=0。同样的如果 sched_reset_on_fork为真，这个值会被清0.另外他的范围为0～99（#define MAX_RT_PRIO MAX_USER_RT_PRIO）</p><h3 id="normal-prio" tabindex="-1">normal_prio <a class="header-anchor" href="#normal-prio" aria-hidden="true">#</a></h3><p>这是一个动态优先级会被动态计算出来的，计算过程如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">	p</span><span style="color:#F92672;">-&gt;</span><span style="color:#F8F8F2;">normal_prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">normal_prio</span><span style="color:#F8F8F2;">(p);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">inline</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">normal_prio</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> task_struct </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">p</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> prio;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">task_has_dl_policy</span><span style="color:#F8F8F2;">(p))</span></span>
<span class="line"><span style="color:#F8F8F2;">		prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> MAX_DL_PRIO</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">task_has_rt_policy</span><span style="color:#F8F8F2;">(p))</span></span>
<span class="line"><span style="color:#F8F8F2;">		prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> MAX_RT_PRIO</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> p-&gt;rt_priority;</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">else</span></span>
<span class="line"><span style="color:#F8F8F2;">		prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">__normal_prio</span><span style="color:#F8F8F2;">(p);</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> prio;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">inline</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">__normal_prio</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> task_struct </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">p</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> p-&gt;static_prio;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>如果是deadline进程，那么值为-1.如果是实时进程则是MAX_RT_PRIO-1 - p-&gt;rt_priority;。否则就等于static_prio.</p><h3 id="prio" tabindex="-1">prio <a class="header-anchor" href="#prio" aria-hidden="true">#</a></h3><p>这个是最关键的一个动态优先级，因为这个调度算法真正使用的值，它的设置在一开始会被设置为一父进程一样，代码在sched_fork中</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">sched_fork</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">unsigned</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">long</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">clone_flags</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> task_struct </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">p</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">	...</span></span>
<span class="line"><span style="color:#F8F8F2;">    p-&gt;prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current-&gt;normal_prio;</span></span>
<span class="line"><span style="color:#F8F8F2;">	...</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>之后的计算如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">effective_prio</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> task_struct </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">p</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">	p-&gt;normal_prio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">normal_prio</span><span style="color:#F8F8F2;">(p);</span></span>
<span class="line"><span style="color:#88846F;">	/*</span></span>
<span class="line"><span style="color:#88846F;">	 * If we are RT tasks or we were boosted to RT priority,</span></span>
<span class="line"><span style="color:#88846F;">	 * keep the priority unchanged. Otherwise, update priority</span></span>
<span class="line"><span style="color:#88846F;">	 * to the normal priority:</span></span>
<span class="line"><span style="color:#88846F;">	 */</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#A6E22E;">rt_prio</span><span style="color:#F8F8F2;">(p-&gt;prio))</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> p-&gt;normal_prio;</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> p-&gt;prio;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这段代码很简单，就是如果是实时进程，我们就不去改变他的prio，直接返回它自己的prio.其他情况，返回normal_prio.</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>四种优先级，实是调度使用的只prio,其实几个都会最终通过prio体现。</p><hr><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>转载请注明出处！ <a href="http://www.cxy.wiki" target="_blank" rel="noreferrer">探索者</a></p></div>`,43)),t(a,{title:n.$title},null,8,["title"])])}const _=l(c,[["render",F]]);export{d as __pageData,_ as default};
