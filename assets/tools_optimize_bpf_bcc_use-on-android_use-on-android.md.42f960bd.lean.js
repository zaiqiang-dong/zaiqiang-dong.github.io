import{_ as s,r as d,o as r,c as t,a as o,b as l}from"./app.21cc2de4.js";const u=JSON.parse('{"title":"在Android中使用EBPF","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 在android平台中使用方法","slug":"_2-在android平台中使用方法","link":"#_2-在android平台中使用方法","children":[{"level":3,"title":"2.1 方法一:adeb","slug":"_2-1-方法一-adeb","link":"#_2-1-方法一-adeb","children":[]},{"level":3,"title":"2.2 方法二:在android源码中编译使用","slug":"_2-2-方法二-在android源码中编译使用","link":"#_2-2-方法二-在android源码中编译使用","children":[]}]},{"level":2,"title":"3. 通过adeb在android中使用bcc","slug":"_3-通过adeb在android中使用bcc","link":"#_3-通过adeb在android中使用bcc","children":[{"level":3,"title":"3.1 在android上安装使用BCC","slug":"_3-1-在android上安装使用bcc","link":"#_3-1-在android上安装使用bcc","children":[]}]},{"level":2,"title":"4 小结","slug":"_4-小结","link":"#_4-小结","children":[]}],"relativePath":"tools/optimize/bpf/bcc/use-on-android/use-on-android.md"}'),i={name:"tools/optimize/bpf/bcc/use-on-android/use-on-android.md"};function c(e,a,p,h,b,F){const n=d("Vssue");return r(),t("div",null,[a[0]||(a[0]=o(`<h1 id="在android中使用ebpf" tabindex="-1">在Android中使用EBPF <a class="header-anchor" href="#在android中使用ebpf" aria-hidden="true">#</a></h1><hr><table><thead><tr><th>软件版本</th><th>硬件版本</th><th>更新内容</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="_1-概述" tabindex="-1">1. 概述 <a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a></h2><p>BPF（Berkeley Packet Filter ），中文翻译为伯克利包过滤器，是类 Unix 系统上数据链路层的一种原始接口，提供原始链路层封包的收发。2014 年初，Alexei Starovoitov 实现了 eBPF（extended Berkeley Packet Filter），最早在linxu-3.15中引入。</p><h2 id="_2-在android平台中使用方法" tabindex="-1">2. 在android平台中使用方法 <a class="header-anchor" href="#_2-在android平台中使用方法" aria-hidden="true">#</a></h2><h3 id="_2-1-方法一-adeb" tabindex="-1">2.1 方法一:adeb <a class="header-anchor" href="#_2-1-方法一-adeb" aria-hidden="true">#</a></h3><p>基本原理是基于一些linux的发行版的最小根文件系统来构建一个文件系统，里面包括了BCC工具链，然后adb push到android系统中，然后在chroot到构建的文件系统中，原理和docker是一样的，只是少了资源限制和隔离。</p><h3 id="_2-2-方法二-在android源码中编译使用" tabindex="-1">2.2 方法二:在android源码中编译使用 <a class="header-anchor" href="#_2-2-方法二-在android源码中编译使用" aria-hidden="true">#</a></h3><p>从android 9，Google官方就在逐步加入对ebfp的支持，在Soong编译系统中加入对bpf程序的编译支持，还提供了bpf的库等的支持。</p><p>方法一相对比较简单，本文从讲方法一，后期文章会详细解决方法二。</p><h2 id="_3-通过adeb在android中使用bcc" tabindex="-1">3. 通过adeb在android中使用bcc <a class="header-anchor" href="#_3-通过adeb在android中使用bcc" aria-hidden="true">#</a></h2><p>BCC 是一个用于创建高效内核跟踪和操作程序的工具包，包括几个有用的工具和示例。它利用扩展的 BPF（Berkeley Packet Filters） BCC 使用的大部分内容都需要 Linux 4.1 及更高版本。 adeb（也称为androdeb）提供了一个强大的Linux shell环境，可以在现有的Android设备上运行流行和主流的Linux跟踪、编译、编辑等开发工具。 adeb 支持现代 Linux 系统上通常可用的所有命令。当然其中也包括BCC工具集。</p><h3 id="_3-1-在android上安装使用bcc" tabindex="-1">3.1 在android上安装使用BCC <a class="header-anchor" href="#_3-1-在android上安装使用bcc" aria-hidden="true">#</a></h3><h4 id="_3-1-1-重新编译内核" tabindex="-1">3.1.1 重新编译内核 <a class="header-anchor" href="#_3-1-1-重新编译内核" aria-hidden="true">#</a></h4><p>重新编译内核，根据你的需要打如下的编译选项：</p><table><thead><tr><th>功能</th><th>编译选项</th></tr></thead><tbody><tr><td>基本</td><td>CONFIG_DEBUG_FS CONFIG_BPF CONFIG_BPF_SYSCALL CONFIG_BPF_JIT CONFIG_HAVE_EBPF_JIT CONFIG_FTRACE_SYSCALLS CONFIG_FUNCTION_TRACER CONFIG_HAVE_DYNAMIC_FTRACE CONFIG_DYNAMIC_FTRACE</td></tr><tr><td>kprobe</td><td>CONFIG_HAVE_KPROBES CONFIG_KPROBES CONFIG_KPROBE_EVENT</td></tr><tr><td>kretprobe</td><td>CONFIG_KRETPROBES CONFIG_HAVE_KRETPROBES CONFIG_SHADOW_CALL_STACK CONFIG_ROP_PROTECTION_NONE</td></tr><tr><td>uprobe</td><td>CONFIG_UPROBES CONFIG_UPROBE_EVENT CONFIG_BPF_EVENTS CONFIG_NET_ACT_POLICE CONFIG_NET_ACT_GACT</td></tr><tr><td>network</td><td>CONFIG_NET_CLS_BPF CONFIG_NET_ACT_BPF CONFIG_NET_SCH_SFQ CONFIG_NET_ACT_POLICE CONFIG_NET_ACT_GACT</td></tr></tbody></table><p>还有一个必须的选项是<strong>CONFIG_IKHEADERS</strong>，这个选择必须是以<strong>CONFIG_IKHEADERS=m</strong>的方式编译，然后将生成的 <strong>.ko</strong> 文件 <code>adb push</code>到系统中 <code>insmod</code>。如果直接以 <strong>CONFIG_IKHEADERS=y</strong> 方式编译，会出现找不到头文件的错误，具体原因有待分析。</p><h4 id="_3-1-2-下载安装adeb" tabindex="-1">3.1.2 下载安装adeb <a class="header-anchor" href="#_3-1-2-下载安装adeb" aria-hidden="true">#</a></h4><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">git clone git@github.com:joelagnel</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">adeb.git</span></span>
<span class="line"><span style="color:#F8F8F2;">cd adeb</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo ln </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">s $(pwd)</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">adeb </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">usr</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">bin</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">adeb</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-1-3-在android中编译安装根文件系统" tabindex="-1">3.1.3 在android中编译安装根文件系统 <a class="header-anchor" href="#_3-1-3-在android中编译安装根文件系统" aria-hidden="true">#</a></h4><p>可以通过如下方式编译安装：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">adeb prepare </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">build </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">arch amd64 </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">bcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个方式需要从网络下载最小根文件系统，安装bcc，国内网络最好有梯子。</p><p>另外一种方式是使用一个下载好的根文件系统，去 <a href="https://github.com/joelagnel/adeb/releases" target="_blank" rel="noreferrer">ADEB RLEASE</a> 下载一个编译好的文件系统 <strong>androdeb-fs.tgz</strong> ,然后</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">adeb prepare </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">archive .</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">androdeb</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">fs.tgz</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>这个有可能会失败，或者没有但是执行<code>adeb shell</code>提示<code>need prepare</code>等无法进入根文件系统，原因大概率是<strong>android</strong>中/data/分区空间不够，无法容纳整个最小根文件系统。</p></div><h4 id="_3-1-4-切换到最小根文件中" tabindex="-1">3.1.4 切换到最小根文件中 <a class="header-anchor" href="#_3-1-4-切换到最小根文件中" aria-hidden="true">#</a></h4><p>执行<code>adeb shell</code>,进行最小根文件系统，然后<code>cd /usr/share/bcc/</code>，就可能看到bcc的工具了。</p><h2 id="_4-小结" tabindex="-1">4 小结 <a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a></h2><p>adeb是一种简单的bcc使用方式，但是目前作者已经停止更新了，未来最好的方式还是基于android源码的方式。</p><hr><div class="tip custom-block"><p class="custom-block-title">提示</p><p>欢迎评论、探讨,如果发现错误请指正。转载请注明出处！ <a href="http://www.tsz.wiki" target="_blank" rel="noreferrer">探索者</a></p></div><hr>`,35)),l(n,{title:e.$title},null,8,["title"])])}const C=s(i,[["render",c]]);export{u as __pageData,C as default};
