import{_ as t,o as r,c as a,a as i}from"./app.a2daf185.js";const m=JSON.parse('{"title":"DeviceTree背景","description":"","frontmatter":{},"headers":[{"level":2,"title":"1 背景问题","slug":"_1-背景问题","link":"#_1-背景问题","children":[]},{"level":2,"title":"2 解决方式","slug":"_2-解决方式","link":"#_2-解决方式","children":[]},{"level":2,"title":"3 DeviceTree","slug":"_3-devicetree","link":"#_3-devicetree","children":[]}],"relativePath":"linux/driver/devicetree/background/background.md"}'),o={name:"linux/driver/devicetree/background/background.md"};function l(c,e,n,s,d,h){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="devicetree背景" tabindex="-1">DeviceTree背景 <a class="header-anchor" href="#devicetree背景" aria-hidden="true">#</a></h1><hr><table><thead><tr><th>软件版本</th><th>硬件版本</th><th>更新内容</th></tr></thead><tbody><tr><td>linux 5.8.18</td><td>arm64</td><td></td></tr></tbody></table><hr><h2 id="_1-背景问题" tabindex="-1">1 背景问题 <a class="header-anchor" href="#_1-背景问题" aria-hidden="true">#</a></h2><p>OMAP 是由美国德州仪器所推出的开放式多媒体应用平台架构（Open Multimedia Application Platform），使用低功耗的ARM架构处理器，可适用于移动式平台。Tony Lindgren是OMAP平台维护者，在v2.6.39 merge window,Tony Lindgren要求合并omap的相关提交，具体内容请查看<a href="https://lkml.org/lkml/2011/3/17/283" target="_blank" rel="noreferrer">邮件</a> 。linus 在处理完这个提交之后发出对arm平台部分代码不满的<a href="https://lkml.org/lkml/2011/3/17/492" target="_blank" rel="noreferrer">邮件</a> ,而且语气比较强烈，如下是附件部分引用：</p><blockquote><p>Gaah. Guys, this whole ARM thing is a f*cking pain in the ass.</p><p>You need to stop stepping on each others toes. There is no way that your changes to those crazy clock-data files should constantly result in those annoying conflicts, just because different people in different ARM trees do some masturbatory renaming of some random device. Seriously.</p></blockquote><p>当时<code>/arch/arm/plat-xxx</code>和<code>/arch/arm/mach-xxx</code>目录的merge工作量很大，而且由于同一个文件会由多人维护，存在大量冲突，具体可以查看linus的<a href="https://lkml.org/lkml/2011/3/30/379" target="_blank" rel="noreferrer">邮件</a>，以下是部分邮件引用：</p><blockquote><p>As far as I&#39;m concerned, the biggest issuee is that some of the ARM crap is just CRAP. It&#39;s idiotic tables that get updated by multiple people, and in totally nonsensical ways. When I see conflicts in those damn clock-data files, I just go mental. Those files are an abomination</p></blockquote><p>ARM平台通过license IP的方式快速扩展，越来越多的芯片厂商加入ARM阵营，也就出现了<code>/arch/arm/plat-xxx</code>代码混乱，芯片外围硬件也不同，当然也会存在<code>/arch/arm/mach-xxx</code>的混乱.</p><h2 id="_2-解决方式" tabindex="-1">2 解决方式 <a class="header-anchor" href="#_2-解决方式" aria-hidden="true">#</a></h2><p>解决方式通过邮件总结如下：</p><ol><li>对Platform相关的代码进行抽象，保留通用代码进入内核, soc特定代码继续保留在<code>/arch/arm/mach-xxx</code>下</li><li>去掉硬编码的设备描述信息，使用DeviceTree来解决</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在arm64平台，硬件做了进一步统一，所以<code>/arch/arm/mach-xxx</code>也不在保留。</p></div><h2 id="_3-devicetree" tabindex="-1">3 DeviceTree <a class="header-anchor" href="#_3-devicetree" aria-hidden="true">#</a></h2><p>DeviceTree指定了一种称为设备树的结构来描述系统硬件。引导程序将设备树加载到内存中，并将指向设备树的指针传递给内核，由内核去解析。</p><p>设备树是一种树形数据结构，其节点描述系统中的设备。每个节点都有描述所表示设备的特征的属性/值对。每个节点只有一个父节点，但根节点除外，根节点没有父节点</p><p>设备树的设备可以是如下几种情况：</p><ol><li>真实的设备，如一个UART设备</li><li>可以硬件设备的一个部分，如TPM中的随机数生成器</li><li>虚拟设备，本质上通过软件模拟的设备</li></ol><p>设备树通常用于描述客户端程序不一定能够动态检测到的设备。例如，PCI 的体系结构使客户端能够探测和检测连接的设备，因此可能不需要描述 PCI 设备的设备树节点。然而，设备节点通常用来描述系统中的 PCI 主桥设备。如果无法通过探测检测到网桥，则此节点是必需的，但在其他情况下是可选的。此外，引导加载程序可以进行 PCI 探测并生成包含其扫描结果的设备树，以传递给操作系统。</p><p>详细的信息可以参考<a href="https://www.devicetree.org/" target="_blank" rel="noreferrer">DeviceTree官网</a></p><hr><div class="tip custom-block"><p class="custom-block-title">提示</p><p>欢迎评论、探讨,如果发现错误请指正。转载请注明出处！ <a href="http://www.tsz.wiki" target="_blank" rel="noreferrer">探索者</a></p></div><hr>',24)]))}const u=t(o,[["render",l]]);export{m as __pageData,u as default};
