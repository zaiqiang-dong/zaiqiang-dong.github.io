import{_ as c,r as n,o as F,c as i,a,d as l,e as p,b as e}from"./app.a2daf185.js";const k=JSON.parse('{"title":"异步中断处理中能否睡眠","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 问题前置条件","slug":"_1-问题前置条件","link":"#_1-问题前置条件","children":[{"level":3,"title":"1.1 内核版本需要是比较新的版本","slug":"_1-1-内核版本需要是比较新的版本","link":"#_1-1-内核版本需要是比较新的版本","children":[]},{"level":3,"title":"1.2 硬件CPU需要是多核的","slug":"_1-2-硬件cpu需要是多核的","link":"#_1-2-硬件cpu需要是多核的","children":[]},{"level":3,"title":"1.3 这里中断只指异步中断","slug":"_1-3-这里中断只指异步中断","link":"#_1-3-这里中断只指异步中断","children":[]}]},{"level":2,"title":"2. 问题分析与结论","slug":"_2-问题分析与结论","link":"#_2-问题分析与结论","children":[{"level":3,"title":"2.1  中断后续代码永远无法执行的问题","slug":"_2-1-中断后续代码永远无法执行的问题","link":"#_2-1-中断后续代码永远无法执行的问题","children":[]},{"level":3,"title":"2.2 中断丢失的问题","slug":"_2-2-中断丢失的问题","link":"#_2-2-中断丢失的问题","children":[]},{"level":3,"title":"2.3 其他的一些问题","slug":"_2-3-其他的一些问题","link":"#_2-3-其他的一些问题","children":[]}]},{"level":2,"title":"3. 结论","slug":"_3-结论","link":"#_3-结论","children":[]}],"relativePath":"linux/exception/interrupt/interrupt-sleep/interrupt-sleep.md"}'),y={name:"linux/exception/interrupt/interrupt-sleep/interrupt-sleep.md"},u={id:"_1-1-内核版本需要是比较新的版本",tabindex:"-1"};function b(o,s,d,h,_,m){const t=n("Badge"),r=n("Vssue");return F(),i("div",null,[s[3]||(s[3]=a('<h1 id="异步中断处理中能否睡眠" tabindex="-1">异步中断处理中能否睡眠 <a class="header-anchor" href="#异步中断处理中能否睡眠" aria-hidden="true">#</a></h1><hr><p>中断中能否睡眠或者说是中断中能否调用可能引起睡眠的API，其实本质上是在中断中可否引发调度的问题，这个问题被在网上多次被激烈的讨论过，但我还是没有看到一个很完美的答案，所以这里我说一下自己的理解。欢迎留言讨论、指正或者批评。</p><hr><table><thead><tr><th>软件版本</th><th>硬件版本</th><th>更新内容</th></tr></thead><tbody><tr><td>linux 4.4</td><td>x86 &amp; arm64</td><td></td></tr></tbody></table><hr><h2 id="_1-问题前置条件" tabindex="-1">1. 问题前置条件 <a class="header-anchor" href="#_1-问题前置条件" aria-hidden="true">#</a></h2>',7)),l("h3",u,[s[0]||(s[0]=p("1.1 内核版本需要是比较新的版本 ")),e(t,{text:"linux-4.4以上"}),s[1]||(s[1]=p()),s[2]||(s[2]=l("a",{class:"header-anchor",href:"#_1-1-内核版本需要是比较新的版本","aria-hidden":"true"},"#",-1))]),s[4]||(s[4]=a(`<p>这里为什么需要指定内核版本，原因是在很老的内核和现在的内核在中断的处理上存在以下区别</p><ol><li>老内核中会有fast handler和slow handler之分而新版内核不存在</li><li>新版的内核中都是会关中断不会出现中断嵌套的情况</li><li>讨论的情况会涉及强占太老的内核不支持</li></ol><h3 id="_1-2-硬件cpu需要是多核的" tabindex="-1">1.2 硬件CPU需要是多核的 <a class="header-anchor" href="#_1-2-硬件cpu需要是多核的" aria-hidden="true">#</a></h3><p>需要是多核的原因如下：</p><ol><li>在单核中这个问题比较简单讨论意义不大</li><li>现在的生产环境中单核CPU运行linux情况比较少</li></ol><h3 id="_1-3-这里中断只指异步中断" tabindex="-1">1.3 这里中断只指异步中断 <a class="header-anchor" href="#_1-3-这里中断只指异步中断" aria-hidden="true">#</a></h3><p>在同步中断睡眠或者调度本来就是可以的，也不会引起内核发生错误。</p><h2 id="_2-问题分析与结论" tabindex="-1">2. 问题分析与结论 <a class="header-anchor" href="#_2-问题分析与结论" aria-hidden="true">#</a></h2><p>其实答案大家都已明白，所以我这里先给结论：</p><div class="tip custom-block"><p class="custom-block-title">结论</p><p>中断中不允许睡眠或者调度，且不存在能不能与应不应该的问题。</p></div><p>下面我们来说明为什么不能，这个问题从正面回答比较难，那我们从反向来回答。 我们从先假设在中断可以被调度，那么就表示在整个内核的运行过程不会因为在中断中发生调度而引发一些问题。如果在内核运行过程存在因中断发生调度而引起别的问题，那么这个假设就是错误的。 在下面的场景中,这个假设是错误的。</p><h3 id="_2-1-中断后续代码永远无法执行的问题" tabindex="-1">2.1 中断后续代码永远无法执行的问题 <a class="header-anchor" href="#_2-1-中断后续代码永远无法执行的问题" aria-hidden="true">#</a></h3><p>在中断中出现调度，会出现中断处理程序在发生调度之后的代码永远无法执行的问题,下面分两种情况来讨论。<br><br><strong>情况1</strong>:通常我们认为，发生中断时执行中断处理函数执行所使用的栈是发生中断时CPU正在执行的进程的栈，如果是这种情况下，即使发生调度，一般情况下中断处理函数在调度之后的代码会得到运行，因为最终一定会有一个时刻被中断的进程会再次调试运行。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>这里说的是一般情况下，那很有一些特殊情况下可能就无法执行，比如下面两种情况：</p><ol><li>在进程被调度出去的之后被kill掉了。</li><li>在中断处理函数中持有了spin_ lock被调度出去后一个高优先级的实时进程又会尝试获取spin lock会出现死锁</li></ol></div><p><strong>情况2</strong>:中断使用的栈来被中断的进程使用的栈不是同一个栈，中断函数有自己的栈。例如在x86平台会有如下的代码：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">bool</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">handle_irq</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> irq_desc </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">desc</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> pt_regs </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">regs</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> overflow </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">check_stack_overflow</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">IS_ERR_OR_NULL</span><span style="color:#F8F8F2;">(desc))</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">user_mode</span><span style="color:#F8F8F2;">(regs) </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!</span><span style="color:#A6E22E;">execute_on_irq_stack</span><span style="color:#F8F8F2;">(overflow, desc)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">unlikely</span><span style="color:#F8F8F2;">(overflow))</span></span>
<span class="line"><span style="color:#F8F8F2;">			</span><span style="color:#A6E22E;">print_stack_overflow</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#A6E22E;">generic_handle_irq_desc</span><span style="color:#F8F8F2;">(desc);</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">inline</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">execute_on_irq_stack</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">overflow</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> irq_desc </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">desc</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> irq_stack </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">curstk, </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">irqstk;</span></span>
<span class="line"><span style="color:#F8F8F2;">	u32 </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">isp, </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">prev_esp, arg1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	curstk </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">struct</span><span style="color:#F8F8F2;"> irq_stack </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">) </span><span style="color:#A6E22E;">current_stack</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">	irqstk </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">__this_cpu_read</span><span style="color:#F8F8F2;">(hardirq_stack);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">	/*</span></span>
<span class="line"><span style="color:#88846F;">	 * this is where we switch to the IRQ stack. However, if we are</span></span>
<span class="line"><span style="color:#88846F;">	 * already using the IRQ stack (because we interrupted a hardirq</span></span>
<span class="line"><span style="color:#88846F;">	 * handler) we can&#39;t do that and just have to keep using the</span></span>
<span class="line"><span style="color:#88846F;">	 * current stack (which is the irq stack already after all)</span></span>
<span class="line"><span style="color:#88846F;">	 */</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">unlikely</span><span style="color:#F8F8F2;">(curstk </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> irqstk))</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	isp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (u32 </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">) ((</span><span style="color:#66D9EF;font-style:italic;">char</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">)irqstk </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">sizeof</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">irqstk));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">	/* Save the next esp at the bottom of the stack */</span></span>
<span class="line"><span style="color:#F8F8F2;">	prev_esp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (u32 </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">)irqstk;</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">prev_esp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_stack_pointer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">unlikely</span><span style="color:#F8F8F2;">(overflow))</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#A6E22E;">call_on_stack</span><span style="color:#F8F8F2;">(print_stack_overflow, isp);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">asm</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">volatile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">xchgl	%%ebx,%%esp	</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">		     CALL_NOSPEC</span></span>
<span class="line"><span style="color:#F8F8F2;">		     </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">movl	%%ebx,%%esp	</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">		     : </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">=a</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> (arg1), </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">=b</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> (isp)</span></span>
<span class="line"><span style="color:#F8F8F2;">		     :  </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">0</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> (desc),   </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">1</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> (isp),</span></span>
<span class="line"><span style="color:#F8F8F2;">			[thunk_target] </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">D</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> (desc-&gt;handle_irq)</span></span>
<span class="line"><span style="color:#F8F8F2;">		     : </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">memory</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">cc</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">ecx</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>也就是在中断服务运行时，会切换为中断栈，如果此时发生调度，那上下文信息被保存到中断栈中，而不是被中断的进程栈上。而调度的最小单位是进程，但被调度的进程再次调度回来时，也没有中断的相关上下文也不会再执行。</p><h3 id="_2-2-中断丢失的问题" tabindex="-1">2.2 中断丢失的问题 <a class="header-anchor" href="#_2-2-中断丢失的问题" aria-hidden="true">#</a></h3><p>这个问题可能是上面两个问题的衍生问题，就是在以上两种情况中，都会出现中断得不到响应或者丢失的情况，因为在中断处理过程中是关中断的。即使在多核系统中，这个时候中断会被分配到别的核，但是linux特点就是如果当前中断在别的核正在处理，那么它仅仅会设置pending状态去委托别正在处理该中断源的核去处理，然后就会退出，所以在这种情况下，就会存在中断丢失的问题或者至少可以称会存在外设状态或者数据丢失的情况，尤其的在2.1中使用单独的中断栈的情况，问题就更加严重。</p><h3 id="_2-3-其他的一些问题" tabindex="-1">2.3 其他的一些问题 <a class="header-anchor" href="#_2-3-其他的一些问题" aria-hidden="true">#</a></h3><p>这有一些中断调度产生问题，这些问题仅仅是一些公平性和配置方面的问题，而不是中断不能调度的的充分条件。</p><ol><li>一个正常运行的进程，被中断还要被调度出去强制让出CPU，这个很不公平。</li><li>在一些产商提供的内核中schedule会检测是否在中断上下文中，如果在基本都会panic</li></ol><h2 id="_3-结论" tabindex="-1">3. 结论 <a class="header-anchor" href="#_3-结论" aria-hidden="true">#</a></h2><p>结论说是中断上下文中不可以睡觉或者调度，欢迎大家留言讨论，批评指正。</p><hr><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>转载请注明出处！ <a href="http://www.tsz.wiki" target="_blank" rel="noreferrer">探索者</a></p></div><hr>`,27)),e(r,{title:o.$title},null,8,["title"])])}const f=c(y,[["render",b]]);export{k as __pageData,f as default};
