import{_ as s,r as i,o as n,c as t,a as r,b as p}from"./app.21cc2de4.js";const o="/blog/assets/tbl_walks.47bb65f7.png",c="/blog/assets/ia.ec0c8a5b.png",d="/blog/assets/l123-e.0ca42e4b.png",b="/blog/assets/l3.482da80a.png",h="/blog/assets/l3-p.5110b056.png",F=JSON.parse('{"title":"VMSAv8页表","description":"","frontmatter":{},"headers":[{"level":2,"title":"0 什么是页表","slug":"_0-什么是页表","link":"#_0-什么是页表","children":[]},{"level":2,"title":"1 输入地址","slug":"_1-输入地址","link":"#_1-输入地址","children":[]},{"level":2,"title":"2 页表项","slug":"_2-页表项","link":"#_2-页表项","children":[{"level":3,"title":"2.1  level 0,1,2页表的项","slug":"_2-1-level-0-1-2页表的项","link":"#_2-1-level-0-1-2页表的项","children":[]},{"level":3,"title":"2.2  level 3页表的项","slug":"_2-2-level-3页表的项","link":"#_2-2-level-3页表的项","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"relativePath":"hardware/cpu/arm/vmsa/vmsa_page/vmsa_page.md"}'),u={name:"hardware/cpu/arm/vmsa/vmsa_page/vmsa_page.md"};function m(e,l,v,_,g,I){const a=i("Vssue");return n(),t("div",null,[l[0]||(l[0]=r('<h1 id="vmsav8页表" tabindex="-1">VMSAv8页表 <a class="header-anchor" href="#vmsav8页表" aria-hidden="true">#</a></h1><hr><table><thead><tr><th>软件版本</th><th>硬件版本</th><th>更新内容</th></tr></thead><tbody><tr><td>linux 4.14</td><td>arm64</td><td>first</td></tr></tbody></table><hr><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在本文中，我们只关注地址总线宽度为48bits,页面大小为4k的情况，其它情况请自行参考arm手册。</p></div><h2 id="_0-什么是页表" tabindex="-1">0 什么是页表 <a class="header-anchor" href="#_0-什么是页表" aria-hidden="true">#</a></h2><p>在我们读书的时候，比如我们要读数学书的第三章第四小节的内容，我会可能会按如下操作进行：</p><ol><li>找到数学书</li><li>打开目录找到第三章</li><li>在第三章里找到第四小节对应的页码X</li><li>打开书的第X页</li><li>读取内容</li></ol><p>当读取内存的数据也是同样方式，只不过查的不是目录而是页表，具体如下图所示 <img src="'+o+'" alt=""></p><ol><li>先从TTBR中拿到页表的基地址Ａ，也就是相当于先找到书</li><li>Ａ加上IA[47:39]偏移找到在level0中的页表项也是下一级页表基地址Ｂ， 相当于找章的过程</li><li>Ｂ再加IA[38:30]偏移找到在level1中的页表项也就是下一级页表基地址Ｃ，还是相当找章的过程</li><li>Ｃ再加IA[29:21]偏移找到在level2中的页表项也就是下一级页表基地址Ｄ，还是相当找章的过程</li><li>Ｄ再加IA[20:12]偏移找到在level3中的页表项，这个项也就一个4k页的基地址Ｅ，还是相当找章的过程</li><li>Ｅ再加IA[11:0 ]偏移找到在就找到一个页内物理地址Ｆ</li><li>读取物理地址Ｆ的值</li></ol><h2 id="_1-输入地址" tabindex="-1">1 输入地址 <a class="header-anchor" href="#_1-输入地址" aria-hidden="true">#</a></h2><p>输入地址（IA）大致情况如下图所示： <img src="'+c+`" alt="ia"> 说明：</p><ul><li>IA[47:39]　level0页表索引</li><li>IA[38:30]　level1页表索引</li><li>IA[29:21]　level2页表索引，如果是块映射，那个这几个bit将做为OA[29:21]</li><li>IA[20:12]　level3页表索引，如果是块映射，那个这几个bit将做为OA[20:12]</li><li>IA[11:00]　页内偏移，也就是输出地址的OA[11:00]</li></ul><p>以上这个表基本和内核文档中的表述是一致的</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">+--------+--------+--------+--------+--------+--------+--------+--------+</span></span>
<span class="line"><span style="color:#F8F8F2;">|63    56|55    48|47    40|39    32|31    24|23    16|15     8|7      0|</span></span>
<span class="line"><span style="color:#F8F8F2;">+--------+--------+--------+--------+--------+--------+--------+--------+</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         |         |         |</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         |         |         v</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         |         |   [11:0]  in-page offset</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         |         +-&gt; [20:12] L3 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         +-----------&gt; [29:21] L2 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         +---------------------&gt; [38:30] L1 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 +-------------------------------&gt; [47:39] L0 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> +-------------------------------------------------&gt; [63] TTBR0/1</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_2-页表项" tabindex="-1">2 页表项 <a class="header-anchor" href="#_2-页表项" aria-hidden="true">#</a></h2><h3 id="_2-1-level-0-1-2页表的项" tabindex="-1">2.1 level 0,1,2页表的项 <a class="header-anchor" href="#_2-1-level-0-1-2页表的项" aria-hidden="true">#</a></h3><p><img src="`+d+'" alt=""> 我们主要讨论Table且m=12的页表项,逐个bit说明，其他的自行参考arm手册</p><ul><li>BIT[0],0表示无效的项，1表示有效的项</li><li>BIT[1],0表示输出地址为一个块地址，１表示输出地址为下一级table基地址</li><li>BIT[11:2],忽略</li><li>BIT[47:12],输出地址</li><li>BIT[51:48],RES0</li><li>BIT[52:58],忽略</li><li>BIT[59],定义了后续 lookup 操作的 PXN 属性</li><li>BIT[60],定义了后续 lookup 操作的 XN 属性</li><li>BIT[62:61],定义了后续 lookup 操作的访问权限控制位 (Access permissions)</li><li>BIT[63],Non-secure state 下的内存访问, bit[63] 没有意义</li></ul><h3 id="_2-2-level-3页表的项" tabindex="-1">2.2 level 3页表的项 <a class="header-anchor" href="#_2-2-level-3页表的项" aria-hidden="true">#</a></h3><p><img src="'+b+'" alt=""></p><p>这里主要关注bit[47:12],这些bit再加上IA[11:0]就是最终的物理地址。</p><ul><li>BIT[0],0无效项，1表示有效</li><li>BIT[1],0与bit[0]一样，1表示包含了 4KB、16KB 或者 64KB page 的地址和属性信息</li><li>BIT[11:2],属性</li><li>BIT[47:12],这些bit再加上IA[11:0]就是最终的物理地址</li><li>BIT[50:48],RES0</li><li>BIT[63:51],属性</li></ul><p>关于属性见下面的表述 <img src="'+h+'" alt=""> 这里的Upper attributes和Lower attributes就是上图中的bit[63:51],bit[11:2],</p><ul><li>BIT[4:2],该 bit 为 Stage 1 memory attributes index,即 MAIR_ELx</li><li>BIT[5],Non-secure,用于指示在 Secure state 下发起的内存访问的 translation 的 output address 指向 Secure world 还是 Non- secure world</li><li>BIT[7:6],该 bit 为 Data Access Permissions</li><li>BIT[9:8],该 bit 为 Shareability field</li><li>BIT[10],该 bit 为 Access flag</li><li>BIT[11],该 bit 为 not global,当 entry 被加载到 TLB 时,该 bit 用于指示 TLB entry 是属于当前 ASID 还是属于所有的 ASID</li><li>BIT[52],该 bit 用于指示 translation table entry 是否属于 contiguous set or entries</li><li>BIT[53],该 bit 为 Privileged execute-never,决定了 descriptor 所指向的 region 在 EL1 中是否 executable</li><li>BIT[54],该 bit 为 Execute-never,决定了 descriptor 所指向的 region 是否 executable</li><li>BIT[58:55],忽略</li><li>BIT[62:59],PBHA</li><li>BIT[63],忽略</li></ul><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h2><p>以上就是对VMSAv8页表的描述，更多的信息请自行参考arm手册。</p><hr><div class="tip custom-block"><p class="custom-block-title">参考文件</p><p><a href="https://www.arm.com/zh/files/downloads/ARMv8_white_paper_v5.pdf" target="_blank" rel="noreferrer">ARMv8_white_paper_v5</a></p><p><a href="https://silver.arm.com/download/ARM_and_AMBA_Architecture/AR150-DA-70000-r0p0-07eac0/DDI0487E_a_armv8_arm.pdf" target="_blank" rel="noreferrer">Armv8-A architecture profile </a></p><p><a href="https://www.kernel.org/doc/html/latest/arm64/memory.html" target="_blank" rel="noreferrer">Memory Layout on AArch64 Linux</a></p></div><hr><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>转载请注明出处！ <a href="http://www.cxy.wiki" target="_blank" rel="noreferrer">探索者</a></p></div><hr>',32)),p(a,{title:e.$title},null,8,["title"])])}const A=s(u,[["render",m]]);export{F as __pageData,A as default};
