import{_ as d,o as e,c as o,a as c}from"./app.addf718b.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"coding/language/c-c++/container/cpp-stl-container.md"}'),r={name:"coding/language/c-c++/container/cpp-stl-container.md"};function n(l,t,a,i,s,g){return e(),o("div",null,t[0]||(t[0]=[c("<table><thead><tr><th>名称</th><th>向量容器</th><th>双向队列容器</th><th>列表容器</th><th>集合</th><th>多重集合</th><th>映射</th><th>多重映射</th></tr></thead><tbody><tr><td>内部数据结构</td><td>连续存储的数组形式（一端开口的数组）</td><td>连续或分段连续存储数组（两端开口的数组）</td><td>双向环状链表</td><td>红黑树（平衡二叉树）</td><td>红黑树</td><td>红黑树</td><td>红黑树</td></tr><tr><td>头文件</td><td><code>#include &lt;vector&gt;</code></td><td><code>#include &lt;deque&gt;</code></td><td><code>#include &lt;list&gt;</code></td><td><code>#include &lt;set&gt;</code></td><td><code>#include &lt;set&gt;</code></td><td><code>#include &lt;map&gt;</code></td><td><code>#include &lt;map&gt;</code></td></tr><tr><td>操作元素的方式</td><td>下标运算符：[0]（可以用迭代器，但插入删除操作时会失效）</td><td>下标运算符或迭代器</td><td>只能用迭代器（不断用变量值来递推新值，相当于指针），不支持使用下标运算符</td><td>迭代器</td><td>迭代器</td><td>迭代器</td><td>迭代器</td></tr><tr><td>插入删除操作迭代器是否失效</td><td>插入和删除元素都会使迭代器失效</td><td>插入任何元素都会使迭代器失效。删除头和尾元素，指向被删除节点迭代器失效，而删除中间元素会使所有迭代器失效</td><td>插入，迭代器不会失效。删除，指向被删除节点迭代器失效</td><td>插入，迭代器不会失效。删除，指向被删除节点迭代器失效</td><td>插入，迭代器不会失效。删除，指向被删除节点迭代器失效</td><td>插入，迭代器不会失效。删除，指向被删除节点迭代器失效</td><td>插入，迭代器不会失效。删除，指向被删除节点迭代器失效</td></tr><tr><td>特点</td><td>增加和获取元素效率高，插入和删除的效率很低</td><td>增加和获取元素效率较高，插入和删除的效率较高</td><td>增加和获取元素效率很低，插入和删除的效率高</td><td>1. 键（关键字）和值（数据）相等（就是模版只有一个参数，键和值合起来）<br>2. 键唯一<br>3. 元素默认按升序排列</td><td>1. 键和值相等<br>2. 键可以不唯一<br>3. 元素默认按升序排列</td><td>1. 键和值分开（模板有两个参数，前面是键后面是值）<br>2. 键唯一<br>3. 元素默认按键的升序排列</td><td>1. 键和值分开<br>2. 键可以不唯一<br>3. 元素默认按键的升序排列</td></tr><tr><td>定义容器</td><td><code>vector&lt;string&gt; book(50);</code></td><td><code>deque&lt;string&gt; book(50);</code></td><td><code>list&lt;string&gt; book;</code></td><td><code>set&lt;string&gt; book;</code></td><td><code>multiset&lt;string&gt; book;</code></td><td><code>map&lt;int, string&gt; book;</code></td><td><code>multimap&lt;int, string&gt; book;</code></td></tr></tbody></table>",1)]))}const h=d(r,[["render",n]]);export{b as __pageData,h as default};
