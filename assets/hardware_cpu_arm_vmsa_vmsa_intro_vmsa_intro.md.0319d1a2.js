import{_ as n,r as l,o as r,c as t,a as p,b as i}from"./app.a2daf185.js";const c="/assets/ipa.b1853060.png",o="/assets/el.7b2d7645.png",d="/assets/granule.d444acea.png",g=JSON.parse('{"title":"VMSAV8简介","description":"","frontmatter":{},"headers":[{"level":2,"title":"0 VMSAV8命名","slug":"_0-vmsav8命名","link":"#_0-vmsav8命名","children":[]},{"level":2,"title":"1 VMSAV8地址类型和地址空间","slug":"_1-vmsav8地址类型和地址空间","link":"#_1-vmsav8地址类型和地址空间","children":[{"level":3,"title":"1.1 VA","slug":"_1-1-va","link":"#_1-1-va","children":[]},{"level":3,"title":"1.2 IPA","slug":"_1-2-ipa","link":"#_1-2-ipa","children":[]},{"level":3,"title":"1.3 PA","slug":"_1-3-pa","link":"#_1-3-pa","children":[]}]},{"level":2,"title":"2 地址标签","slug":"_2-地址标签","link":"#_2-地址标签","children":[]},{"level":2,"title":"4 地址转换与异常等级","slug":"_4-地址转换与异常等级","link":"#_4-地址转换与异常等级","children":[]},{"level":2,"title":"5 地址转换粒度","slug":"_5-地址转换粒度","link":"#_5-地址转换粒度","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"relativePath":"hardware/cpu/arm/vmsa/vmsa_intro/vmsa_intro.md"}'),h={name:"hardware/cpu/arm/vmsa/vmsa_intro/vmsa_intro.md"};function F(a,s,b,m,u,v){const e=l("Vssue");return r(),t("div",null,[s[0]||(s[0]=p('<h1 id="vmsav8简介" tabindex="-1">VMSAV8简介 <a class="header-anchor" href="#vmsav8简介" aria-hidden="true">#</a></h1><hr><table><thead><tr><th>软件版本</th><th>硬件版本</th><th>更新内容</th></tr></thead><tbody><tr><td>linux 4.14</td><td>armv8-64</td><td>first</td></tr></tbody></table><hr><p>VMSA即Virtual Memory System Architecturer的缩写，中文为虚拟内存系统架构。VMSA提供一个内存管理单元(MMU)，用于控制地址转换、访问权限和内存属性的确定和检查。地址转换就是将虚拟地址(VA)映射到物理地址(PA)。VA到PA的映射需要一个单独的翻译阶段，或者两个连续的翻译阶段，也就是stage。</p><h2 id="_0-vmsav8命名" tabindex="-1">0 VMSAV8命名 <a class="header-anchor" href="#_0-vmsav8命名" aria-hidden="true">#</a></h2><ol><li>VMSAv8-32　运行在AArch32模式下的地址转换，可能存在一个stage或者两个连续的stage.</li><li>VMSAv8-64　运行在AArch64模式下的地址转换，可能存在一个stage或者两个连续的stage.</li><li>VMSAv8　通指以上两种。</li></ol><h2 id="_1-vmsav8地址类型和地址空间" tabindex="-1">1 VMSAV8地址类型和地址空间 <a class="header-anchor" href="#_1-vmsav8地址类型和地址空间" aria-hidden="true">#</a></h2><h3 id="_1-1-va" tabindex="-1">1.1 VA <a class="header-anchor" href="#_1-1-va" aria-hidden="true">#</a></h3><p>VA也就是Virtual address虚拟地址缩写。在V8中最大支持48bit 的地址宽度。 地址范围从0x0000 0000 0000 0000 到 0x0000 FFFF FFFF FFFF</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在ARMv8.2-LVA中，52bits地址宽度的地址将被支持。</p></div><h3 id="_1-2-ipa" tabindex="-1">1.2 IPA <a class="header-anchor" href="#_1-2-ipa" aria-hidden="true">#</a></h3><p>IPA即Intermediate physical address的缩写，在一次虚拟地址到物理地址的转换过程中，可能会包括两个stage,那第么IPA就是stage1的输出，stage2的输入，它是一个中间产物。如下图所示：</p><p><img src="'+c+'" alt="ipa"></p><h3 id="_1-3-pa" tabindex="-1">1.3 PA <a class="header-anchor" href="#_1-3-pa" aria-hidden="true">#</a></h3><p>PA即Physical address的缩写，就是物理地址，也就是直正的地址总线编址的地址。</p><h2 id="_2-地址标签" tabindex="-1">2 地址标签 <a class="header-anchor" href="#_2-地址标签" aria-hidden="true">#</a></h2><p>在内核文档Memory Layout on AArch64 Linux中有如下表述：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>User addresses have bits 63:48 set to 0 while the kernel addresses have the same bits set to 1. TTBRx selection is given by bit 63 of the virtual address. The swapper_pg_dir contains only kernel (global) mappings while the user pgd contains only user (non-global) mappings. The swapper_pg_dir address is written to TTBR1 and never written to TTBR0.</p></div><p>也就是内核把VA空间分为两段：</p><ul><li>0x0000 0000 0000 0000 到　0x0000 FFFF FFFF FFFF　为user地址空间</li><li>0xFFFF 0000 0000 0000 到　0xFFFF FFFF FFFF FFFF　为内核空间</li></ul><p>这样的全部的地址空间就是256T+256T，这和我们之前说的最大48bits地址总线宽度256T的空间不一致，其实很简单，原因就是有两个页表基址寄存器：TTBR1和TTBR0.</p><p>在看一下arm参考手册中的描述</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For addresses when stage 1 translation can support two VA ranges</p></div><table><thead><tr><th>VA[55]</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>如果使能了 stage 1 的转换, 那么 TCR_ELx.TBI0 控制是否启用 address tags 功能.寄存器 TTBR0_ELx 保存地址转换表的基地址.</td></tr><tr><td>1</td><td>如果使能了 stage 1 的转换, 那么 TCR_ELx.TBI1 控制是否启用 address tags 功能. 寄存器 TTBR1_ELx 保存地址转换表的基地址.</td></tr></tbody></table><p>基本上也是一个意思。关于地址标签，就了解这些还有一些其他的信息，可以参考手册。</p><h2 id="_4-地址转换与异常等级" tabindex="-1">4 地址转换与异常等级 <a class="header-anchor" href="#_4-地址转换与异常等级" aria-hidden="true">#</a></h2><p>它两之间的关系主要如下图： <img src="'+o+'" alt="el"></p><p>在这个小节中我们主要了解，我们的linux 内核是运行在EL1 非加密的异常等级上就够了。</p><h2 id="_5-地址转换粒度" tabindex="-1">5 地址转换粒度 <a class="header-anchor" href="#_5-地址转换粒度" aria-hidden="true">#</a></h2><p>在arm参考手册中主要支持３种粒度：4K 16K 64K，信息如下图所示： <img src="'+d+`" alt="granule"> 在内核中，我们主要使用就是48bits 地址宽度和4k页面大小。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">+--------+--------+--------+--------+--------+--------+--------+--------+</span></span>
<span class="line"><span style="color:#F8F8F2;">|63    56|55    48|47    40|39    32|31    24|23    16|15     8|7      0|</span></span>
<span class="line"><span style="color:#F8F8F2;">+--------+--------+--------+--------+--------+--------+--------+--------+</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         |         |         |</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         |         |         v</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         |         |   [11:0]  in-page offset</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         |         +-&gt; [20:12] L3 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         |         +-----------&gt; [29:21] L2 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |         +---------------------&gt; [38:30] L1 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 +-------------------------------&gt; [47:39] L0 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> +-------------------------------------------------&gt; [63] TTBR0/1</span></span>
<span class="line"><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>当然你也可以配置64K</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">+--------+--------+--------+--------+--------+--------+--------+--------+</span></span>
<span class="line"><span style="color:#F8F8F2;">|63    56|55    48|47    40|39    32|31    24|23    16|15     8|7      0|</span></span>
<span class="line"><span style="color:#F8F8F2;">+--------+--------+--------+--------+--------+--------+--------+--------+</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |    |               |              |</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |    |               |              v</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |    |               |            [15:0]  in-page offset</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |    |               +----------&gt; [28:16] L3 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 |    +--------------------------&gt; [41:29] L2 index</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                 +-------------------------------&gt; [47:42] L1 index (48-bit)</span></span>
<span class="line"><span style="color:#F8F8F2;"> |                                                   [51:42] L1 index (52-bit)</span></span>
<span class="line"><span style="color:#F8F8F2;"> +-------------------------------------------------&gt; [63] TTBR0/1</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h2><p>本文介绍了VMSAv8的一些基本信息，有一点就是我们关注的更多的是和软件关系密切的部分，其实的部分大家可以通过arm参考手册了解。</p><hr><div class="tip custom-block"><p class="custom-block-title">参考文件</p><p><a href="https://www.arm.com/zh/files/downloads/ARMv8_white_paper_v5.pdf" target="_blank" rel="noreferrer">ARMv8_white_paper_v5</a></p><p><a href="https://silver.arm.com/download/ARM_and_AMBA_Architecture/AR150-DA-70000-r0p0-07eac0/DDI0487E_a_armv8_arm.pdf" target="_blank" rel="noreferrer">Armv8-A architecture profile </a></p><p><a href="https://www.kernel.org/doc/html/latest/arm64/memory.html" target="_blank" rel="noreferrer">Memory Layout on AArch64 Linux</a></p></div><hr><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>转载请注明出处！ <a href="http://www.cxy.wiki" target="_blank" rel="noreferrer">探索者</a></p></div><hr>`,41)),i(e,{title:a.$title},null,8,["title"])])}const A=n(h,[["render",F]]);export{g as __pageData,A as default};
