import{_ as e,r as l,o as p,c as o,a as t,b as r}from"./app.a2daf185.js";const i="/assets/1.caf0ecd3.png",h=JSON.parse('{"title":"REPO原理与使用","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2.repo一般使用流程","slug":"_2-repo一般使用流程","link":"#_2-repo一般使用流程","children":[]},{"level":2,"title":"3.repo的目录结构","slug":"_3-repo的目录结构","link":"#_3-repo的目录结构","children":[{"level":3,"title":"3.1 repo init之后的目录结构","slug":"_3-1-repo-init之后的目录结构","link":"#_3-1-repo-init之后的目录结构","children":[]},{"level":3,"title":"3.2 repo sync之后的目录结构","slug":"_3-2-repo-sync之后的目录结构","link":"#_3-2-repo-sync之后的目录结构","children":[]}]},{"level":2,"title":"4. repo 常用命令介绍","slug":"_4-repo-常用命令介绍","link":"#_4-repo-常用命令介绍","children":[]},{"level":2,"title":"5.创建repo仓库","slug":"_5-创建repo仓库","link":"#_5-创建repo仓库","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"relativePath":"tools/orther/repo/repo.md"}'),c={name:"tools/orther/repo/repo.md"};function d(n,s,F,u,m,y){const a=l("Vssue");return p(),o("div",null,[s[0]||(s[0]=t('<h1 id="repo原理与使用" tabindex="-1">REPO原理与使用 <a class="header-anchor" href="#repo原理与使用" aria-hidden="true">#</a></h1><hr><table><thead><tr><th>软件版本</th><th>硬件版本</th><th>更新内容</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="_1-概述" tabindex="-1">1.概述 <a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a></h2><p>repo起源自android项目，在android这个开源项目中存在700个左右的git仓库，当你下载android源码时，如果手动同步这么多的git仓库，必然很累又不可靠，所以即使没有repo，你也可能会想着通过一个脚本工具来同步android的git仓库，只不过现在google帮你写了这个脚本，并且还加了很多其他的功能，你可以直接使用。</p><p>repo不是用于替代git，而是依赖于git来工具，对仓库真正的操作还是通过git，只不过是通过repo调用git对每个仓库来进行操作. <img src="'+i+`" alt="repo" title="opt title"></p><h2 id="_2-repo一般使用流程" tabindex="-1">2.repo一般使用流程 <a class="header-anchor" href="#_2-repo一般使用流程" aria-hidden="true">#</a></h2><p>通常我们同步一个由repo管理的git仓库时，由如下几个：</p><ol><li>repo init 存入manifest文件的仓库地址，如从google同步android源码</li></ol><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">repo init </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">u https:</span><span style="color:#88846F;">//android.googlesource.com/platform/manifest</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>repo sync 根据manifest文件配置的git仓库逐个同步</li></ol><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">repo sync</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>repo upload 来提交修改 当你同步完一份代码，修改完某个仓库的代码你可以如下指定提交</li></ol><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">git add .</span></span>
<span class="line"><span style="color:#F8F8F2;">git commit</span></span>
<span class="line"><span style="color:#F8F8F2;">repo upload .</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当然你也可以通过git直接提交</p><h2 id="_3-repo的目录结构" tabindex="-1">3.repo的目录结构 <a class="header-anchor" href="#_3-repo的目录结构" aria-hidden="true">#</a></h2><h3 id="_3-1-repo-init之后的目录结构" tabindex="-1">3.1 repo init之后的目录结构 <a class="header-anchor" href="#_3-1-repo-init之后的目录结构" aria-hidden="true">#</a></h3><p>当你通过repo init之后，在你执行命令的目录下会存在一个**.repo**文件夹，里面的内容如下</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">manifests  manifests.git  manifest.xml  repo</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其中manifest.git是你执行repo sync后面加的那个manifest的git仓库，这个仓库里主要的文件就是一个xml文件，里面定义很多的git仓库，名子一般为default.xml，manifest是从mainfest.git中checkout出来的。manifest.xml是由repo创建,其内容一般如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#F92672;">&lt;?</span><span style="color:#F8F8F2;">xml version</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;1.0&quot;</span><span style="color:#F8F8F2;"> encoding</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;UTF-8&quot;</span><span style="color:#F92672;">?&gt;</span></span>
<span class="line"><span style="color:#F92672;">&lt;!--</span></span>
<span class="line"><span style="color:#F8F8F2;">DO NOT EDIT THIS FILE</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">  It is generated by repo and changes will be discarded.</span></span>
<span class="line"><span style="color:#F8F8F2;">If you want to use a different manifest, use \`repo init </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">m </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">file</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">\` instead.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">If you want to customize your checkout by overriding manifest settings, use</span></span>
<span class="line"><span style="color:#F8F8F2;">the local_manifests</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> directory instead.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">For more information on repo manifests, check out</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">https</span><span style="color:#F92672;">:</span><span style="color:#88846F;">//gerrit.googlesource.com/git-repo/+/HEAD/docs/manifest-format.md</span></span>
<span class="line"><span style="color:#F92672;">--&gt;</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">manifest</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">include name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;default.xml&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">/&gt;</span></span>
<span class="line"><span style="color:#F92672;">&lt;/</span><span style="color:#F8F8F2;">manifest</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>里面有的default.xml就是你mainfest文件夹中的default.xml 最后一个repo目录，repo的执行需要的脚本文件。</p><h3 id="_3-2-repo-sync之后的目录结构" tabindex="-1">3.2 repo sync之后的目录结构 <a class="header-anchor" href="#_3-2-repo-sync之后的目录结构" aria-hidden="true">#</a></h3><p>执行完repo sync之后，目录结构如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">manifests  manifests.git  manifest.xml  project</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">objects  projects  repo</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>就是多个project-objects和projects两个目录，这两个目录里存放的在default.xml的记录的git仓库，其中projects中存在是git的子模块所在的仓库。</p><h2 id="_4-repo-常用命令介绍" tabindex="-1">4. repo 常用命令介绍 <a class="header-anchor" href="#_4-repo-常用命令介绍" aria-hidden="true">#</a></h2><ol><li><code>repo init -u url [options]</code></li></ol><ul><li>-u：指定从中检索清单代码库的网址。常见清单位于 <a href="https://android.googlesource.com/platform/manifest%E3%80%82" target="_blank" rel="noreferrer">https://android.googlesource.com/platform/manifest。</a></li><li>-m：选择代码库中的清单文件。如果未选择清单名称，则默认为 default.xml。</li><li>-b：指定修订版本，即特定的 manifest-branch。</li></ul><ol start="2"><li><code>repo sync [project-list]</code></li></ol><p>下载新的更改并更新本地环境中的工作文件，基本上可以在所有 Git 代码库中完成 git fetch。如果在未使用任何参数的情况下运行 repo sync，则该命令会同步所有项目的文件 运行 repo sync 后，将出现以下情况：</p><ul><li>如果目标项目从未同步过，则 repo sync 相当于 git clone。远程代码库中的所有分支都会复制到本地项目目录中。</li><li>如果目标项目以前同步过，则 repo sync 相当于：</li></ul><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">  git remote update</span></span>
<span class="line"><span style="color:#F8F8F2;">  git rebase origin</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">branch</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其中 branch 是本地项目目录中当前已检出的分支。如果本地分支没有在跟踪远程代码库中的分支，则项目不会发生任何同步。</p><ul><li>如果 Git rebase 操作导致合并冲突，请使用常规 Git 命令（例如 git rebase --continue）来解决冲突。</li></ul><ol start="3"><li><code>repo upload [&lt;PROJECT_LIST&gt;]</code></li></ol><p>这条命令通过用于提交代码。</p><ol start="4"><li><code>repo forall [&lt;PROJECT_LIST&gt;] -c &lt;COMMAND&gt;</code></li></ol><ul><li>-c：要运行的命令和参数。此命令会通过 /bin/sh 进行求值，它之后的任何参数都将作为 shell 位置参数传递。</li><li>-p：在指定命令输出结果之前显示项目标头。这通过以下方式实现：将管道绑定到命令的 stdin、stdout 和 sterr 流，然后通过管道将所有输出结果传输到一个页面调度会话中显示的连续流中。</li><li>-v：显示该命令向 stderr 写入的消息。</li></ul><p>这条命令很有用，其实是对每个git仓库执行-c后面的指定，可以git命令，也可以shell</p><ol start="5"><li><code>repo start &lt;BRANCH_NAME&gt; [&lt;PROJECT_LIST&gt;]</code></li></ol><p>从清单中指定的修订版本开始，创建一个新的分支进行开发。 &lt;BRANCH_NAME&gt; 参数应简要说明您尝试对项目进行的更改。如果您不知道，则不妨考虑使用默认名称。 &lt;PROJECT_LIST&gt; 指定了将参与此主题分支的项目。</p><h2 id="_5-创建repo仓库" tabindex="-1">5.创建repo仓库 <a class="header-anchor" href="#_5-创建repo仓库" aria-hidden="true">#</a></h2><p>这里基于github的创建</p><ol><li>创建一个mainfest仓库</li><li>在manifest仓库创建一个default.xml文件，内容如下</li></ol><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">&lt;?</span><span style="color:#F8F8F2;">xml version</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;1.0&quot;</span><span style="color:#F8F8F2;"> encoding</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;UTF-8&quot;</span><span style="color:#F92672;">?&gt;</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">manifest</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">default remote</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;origin&quot;</span><span style="color:#F8F8F2;"> revision</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;master&quot;</span><span style="color:#F8F8F2;"> fetch</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;https://github.com/username&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">/&gt;</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">project path</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;xxx&quot;</span><span style="color:#F8F8F2;"> name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;xxx&quot;</span><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">/&gt;</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">project path</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;xxx&quot;</span><span style="color:#F8F8F2;"> name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;xxx&quot;</span><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">/&gt;</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">project path</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;xxx&quot;</span><span style="color:#F8F8F2;"> name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;xxx&quot;</span><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">/&gt;</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">project path</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;xxx&quot;</span><span style="color:#F8F8F2;"> name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;xxx&quot;</span><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">...</span></span>
<span class="line"><span style="color:#F92672;">&lt;/</span><span style="color:#F8F8F2;">manifest</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>其中fetch地下+project中的name就是一个git仓库的地址。repo 会通过git来克隆这个git仓库。 具体这个xml的编写参考[3]文档</p><ol start="3"><li>通过前面两步之后就可以通过repo sync来同步了。</li></ol><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-hidden="true">#</a></h2><ol><li><a href="https://gerrit.googlesource.com/git-repo/+/master/docs/internal-fs-layout.md#Manifests" target="_blank" rel="noreferrer">repo layout</a></li><li><a href="https://source.android.com/docs/setup/create/repo?hl=zh-cn#init" target="_blank" rel="noreferrer">repo command</a></li><li><a href="https://gerrit.googlesource.com/git-repo/+/HEAD/docs/manifest-format.md#XML-File-Format" target="_blank" rel="noreferrer">repo xml</a></li></ol><hr><div class="tip custom-block"><p class="custom-block-title">提示</p><p>欢迎评论、探讨,如果发现错误请指正。转载请注明出处！ <a href="http://www.tsz.wiki" target="_blank" rel="noreferrer">探索者</a></p></div><hr>`,54)),r(a,{title:n.$title},null,8,["title"])])}const g=e(c,[["render",d]]);export{h as __pageData,g as default};
